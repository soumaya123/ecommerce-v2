{"ast":null,"code":"// import axios from \"axios\";\n// import TokenService from \"./Token\";\n// const instance = axios.create({\n//   baseURL: \"http://localhost:8080/api\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n// instance.interceptors.request.use(\n//   (config) => {\n//     const token = TokenService.getLocalAccessToken();\n//     if (token) {\n//       // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\n//       config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n// instance.interceptors.response.use(\n//   (res) => {\n//     return res;\n//   },\n//   async (err) => {\n//     const originalConfig = err.config;\n//     if (originalConfig.url !== \"/auth/signin\" && err.response) {\n//       // Access Token was expired\n//       if (err.response.status === 401 && !originalConfig._retry) {\n//         originalConfig._retry = true;\n//         try {\n//           const rs = await instance.post(\"/auth/refreshtoken\", {\n//             refreshToken: TokenService.getLocalRefreshToken(),\n//           });\n//           const { accessToken } = rs.data;\n//           TokenService.updateLocalAccessToken(accessToken);\n//           return instance(originalConfig);\n//         } catch (_error) {\n//           return Promise.reject(_error);\n//         }\n//       }\n//     }\n//     return Promise.reject(err);\n//   }\n// );\n// export default instance;\n\nimport axios from 'axios';\nimport { API_URL } from './config';\n//import { getCookie } from '../jwt/function'\n\nexport default axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    //  \"Authorization\": getCookie('token'),\n    'Access-Control-Allow-Headers': 'Authorization',\n    \"x-access-token\": localStorage.getItem('@access_token'),\n    'Authorization': 'Bearer ' + localStorage.getItem('@access_token')\n  }\n});","map":{"version":3,"names":["axios","API_URL","create","baseURL","headers","localStorage","getItem"],"sources":["/home/soumayaites/Desktop/testecommerce/src/services/Api/api.js"],"sourcesContent":["// import axios from \"axios\";\n// import TokenService from \"./Token\";\n// const instance = axios.create({\n//   baseURL: \"http://localhost:8080/api\",\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n// instance.interceptors.request.use(\n//   (config) => {\n//     const token = TokenService.getLocalAccessToken();\n//     if (token) {\n//       // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\n//       config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n// instance.interceptors.response.use(\n//   (res) => {\n//     return res;\n//   },\n//   async (err) => {\n//     const originalConfig = err.config;\n//     if (originalConfig.url !== \"/auth/signin\" && err.response) {\n//       // Access Token was expired\n//       if (err.response.status === 401 && !originalConfig._retry) {\n//         originalConfig._retry = true;\n//         try {\n//           const rs = await instance.post(\"/auth/refreshtoken\", {\n//             refreshToken: TokenService.getLocalRefreshToken(),\n//           });\n//           const { accessToken } = rs.data;\n//           TokenService.updateLocalAccessToken(accessToken);\n//           return instance(originalConfig);\n//         } catch (_error) {\n//           return Promise.reject(_error);\n//         }\n//       }\n//     }\n//     return Promise.reject(err);\n//   }\n// );\n// export default instance;\n\nimport axios from 'axios';\nimport { API_URL } from './config';\n//import { getCookie } from '../jwt/function'\n\nexport default axios.create({\n    baseURL : API_URL,\n    headers : {\n        \"Content-Type\":\"application/json\",\n     //  \"Authorization\": getCookie('token'),\n        'Access-Control-Allow-Headers': 'Authorization',\n        \"x-access-token\": localStorage.getItem('@access_token'),\n        'Authorization': 'Bearer ' + localStorage.getItem('@access_token'),\n    },\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,UAAU;AAClC;;AAEA,eAAeD,KAAK,CAACE,MAAM,CAAC;EACxBC,OAAO,EAAGF,OAAO;EACjBG,OAAO,EAAG;IACN,cAAc,EAAC,kBAAkB;IACpC;IACG,8BAA8B,EAAE,eAAe;IAC/C,gBAAgB,EAAEC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACvD,eAAe,EAAE,SAAS,GAAGD,YAAY,CAACC,OAAO,CAAC,eAAe;EACrE;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}